{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "686205fe",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'streamlit'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m            \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m         \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mst\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mseaborn\u001b[39;00m           \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01msns\u001b[39;00m\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mplt\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'streamlit'"
     ]
    }
   ],
   "source": [
    "import pandas            as pd\n",
    "import streamlit         as st\n",
    "import seaborn           as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from PIL                 import Image\n",
    "from io                  import BytesIO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d12a1b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "custom_params = {\"axes.spines.right\": False, \"axes.spines.top\": False}\n",
    "sns.set_theme(style=\"ticks\", rc=custom_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4b6b5b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_data(file_data):\n",
    "    try:\n",
    "        return pd.read_csv(file_data, sep=';')\n",
    "    except:\n",
    "        return pd.read_excel(file_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56aef620",
   "metadata": {},
   "outputs": [],
   "source": [
    "def multiselect_filter(relatorio, col, selecionados):\n",
    "    if 'all' in selecionados:\n",
    "        return relatorio\n",
    "    else:\n",
    "        return relatorio[relatorio[col].isin(selecionados)].reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45c9f57c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_df(df):\n",
    "    return df.to_csv(index=False).encode('utf-8')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae0f6430",
   "metadata": {},
   "outputs": [],
   "source": [
    "def to_excel(df):\n",
    "    output = BytesIO()\n",
    "    writer = pd.ExcelWriter(output, engine='xlsxwriter')\n",
    "    df.to_excel(writer, index=False, sheet_name='Sheet1')\n",
    "    writer.close()\n",
    "    processed_data = output.getvalue()\n",
    "    return processed_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6bf57b22",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main():\n",
    "    # Configuração inicial da página da aplicação\n",
    "    st.set_page_config(page_title = 'Telemarketing analisys', \\\n",
    "        page_icon = '../img/telmarketing_icon.png',\n",
    "        layout=\"wide\",\n",
    "        initial_sidebar_state='expanded'\n",
    "    )\n",
    "\n",
    "    # Título principal da aplicação\n",
    "    st.write('# Telemarketing analisys')\n",
    "    st.markdown(\"---\")\n",
    "    \n",
    "    # Apresenta a imagem na barra lateral da aplicação\n",
    "    image = Image.open(\"../img/Bank-Branding.jpg\")\n",
    "    st.sidebar.image(image)\n",
    "\n",
    "    # Botão para carregar arquivo na aplicação\n",
    "    st.sidebar.write(\"## Suba o arquivo\")\n",
    "    data_file_1 = st.sidebar.file_uploader(\"Bank marketing data\", type = ['csv','xlsx'])\n",
    "\n",
    "    # Verifica se há conteúdo carregado na aplicação\n",
    "    if (data_file_1 is not None):\n",
    "        bank_raw = load_data(data_file_1)\n",
    "        bank = bank_raw.copy()\n",
    "\n",
    "        st.write('## Antes dos filtros')\n",
    "        st.write(bank_raw.head())\n",
    "\n",
    "        with st.sidebar.form(key='my_form'):\n",
    "\n",
    "            # SELECIONA O TIPO DE GRÁFICO\n",
    "            graph_type = st.radio('Tipo de gráfico:', ('Barras', 'Pizza'))\n",
    "        \n",
    "            # IDADES\n",
    "            max_age = int(bank.age.max())\n",
    "            min_age = int(bank.age.min())\n",
    "            idades = st.slider(label='Idade', \n",
    "                                        min_value = min_age,\n",
    "                                        max_value = max_age, \n",
    "                                        value = (min_age, max_age),\n",
    "                                        step = 1)\n",
    "\n",
    "\n",
    "            # PROFISSÕES\n",
    "            jobs_list = bank.job.unique().tolist()\n",
    "            jobs_list.append('all')\n",
    "            jobs_selected =  st.multiselect(\"Profissão\", jobs_list, ['all'])\n",
    "\n",
    "            # ESTADO CIVIL\n",
    "            marital_list = bank.marital.unique().tolist()\n",
    "            marital_list.append('all')\n",
    "            marital_selected =  st.multiselect(\"Estado civil\", marital_list, ['all'])\n",
    "\n",
    "            # DEFAULT?\n",
    "            default_list = bank.default.unique().tolist()\n",
    "            default_list.append('all')\n",
    "            default_selected =  st.multiselect(\"Default\", default_list, ['all'])\n",
    "\n",
    "            \n",
    "            # TEM FINANCIAMENTO IMOBILIÁRIO?\n",
    "            housing_list = bank.housing.unique().tolist()\n",
    "            housing_list.append('all')\n",
    "            housing_selected =  st.multiselect(\"Tem financiamento imob?\", housing_list, ['all'])\n",
    "\n",
    "            \n",
    "            # TEM EMPRÉSTIMO?\n",
    "            loan_list = bank.loan.unique().tolist()\n",
    "            loan_list.append('all')\n",
    "            loan_selected =  st.multiselect(\"Tem empréstimo?\", loan_list, ['all'])\n",
    "\n",
    "            \n",
    "            # MEIO DE CONTATO?\n",
    "            contact_list = bank.contact.unique().tolist()\n",
    "            contact_list.append('all')\n",
    "            contact_selected =  st.multiselect(\"Meio de contato\", contact_list, ['all'])\n",
    "\n",
    "            \n",
    "            # MÊS DO CONTATO\n",
    "            month_list = bank.month.unique().tolist()\n",
    "            month_list.append('all')\n",
    "            month_selected =  st.multiselect(\"Mês do contato\", month_list, ['all'])\n",
    "\n",
    "            \n",
    "            # DIA DA SEMANA\n",
    "            day_of_week_list = bank.day_of_week.unique().tolist()\n",
    "            day_of_week_list.append('all')\n",
    "            day_of_week_selected =  st.multiselect(\"Dia da semana\", day_of_week_list, ['all'])\n",
    "\n",
    "\n",
    "                    \n",
    "            # encadeamento de métodos para filtrar a seleção\n",
    "            bank = (bank.query(\"age >= @idades[0] and age <= @idades[1]\")\n",
    "                        .pipe(multiselect_filter, 'job', jobs_selected)\n",
    "                        .pipe(multiselect_filter, 'marital', marital_selected)\n",
    "                        .pipe(multiselect_filter, 'default', default_selected)\n",
    "                        .pipe(multiselect_filter, 'housing', housing_selected)\n",
    "                        .pipe(multiselect_filter, 'loan', loan_selected)\n",
    "                        .pipe(multiselect_filter, 'contact', contact_selected)\n",
    "                        .pipe(multiselect_filter, 'month', month_selected)\n",
    "                        .pipe(multiselect_filter, 'day_of_week', day_of_week_selected)\n",
    "            )\n",
    "\n",
    "\n",
    "            submit_button = st.form_submit_button(label='Aplicar')\n",
    "        \n",
    "        # Botões de download dos dados filtrados\n",
    "        st.write('## Após os filtros')\n",
    "        st.write(bank.head())\n",
    "        \n",
    "        df_xlsx = to_excel(bank)\n",
    "        st.download_button(label='📥 Download tabela filtrada em EXCEL',\n",
    "                            data=df_xlsx ,\n",
    "                            file_name= 'bank_filtered.xlsx')\n",
    "        st.markdown(\"---\")\n",
    "\n",
    "        # PLOTS    \n",
    "        fig, ax = plt.subplots(1, 2, figsize = (5,3))\n",
    "\n",
    "        bank_raw_target_perc = bank_raw.y.value_counts(normalize = True).to_frame()*100\n",
    "        bank_raw_target_perc = bank_raw_target_perc.sort_index()\n",
    "        \n",
    "        try:\n",
    "            bank_target_perc = bank.y.value_counts(normalize = True).to_frame()*100\n",
    "            bank_target_perc = bank_target_perc.sort_index()\n",
    "        except:\n",
    "            st.error('Erro no filtro')\n",
    "        \n",
    "        # Botões de download dos dados dos gráficos\n",
    "        col1, col2 = st.columns(2)\n",
    "\n",
    "        df_xlsx = to_excel(bank_raw_target_perc)\n",
    "        col1.write('### Proporção original')\n",
    "        col1.write(bank_raw_target_perc)\n",
    "        col1.download_button(label='📥 Download',\n",
    "                            data=df_xlsx ,\n",
    "                            file_name= 'bank_raw_y.xlsx')\n",
    "        \n",
    "        df_xlsx = to_excel(bank_target_perc)\n",
    "        col2.write('### Proporção da tabela com filtros')\n",
    "        col2.write(bank_target_perc)\n",
    "        col2.download_button(label='📥 Download',\n",
    "                            data=df_xlsx ,\n",
    "                            file_name= 'bank_y.xlsx')\n",
    "        st.markdown(\"---\")\n",
    "    \n",
    "\n",
    "        st.write('## Proporção de aceite')\n",
    "        # PLOTS    \n",
    "        if graph_type == 'Barras':\n",
    "            sns.barplot(x = bank_raw_target_perc.index, \n",
    "                        y = bank_raw_target_perc.columns[0],\n",
    "                        data = bank_raw_target_perc, \n",
    "                        ax = ax[0])\n",
    "            ax[0].bar_label(ax[0].containers[0])\n",
    "            ax[0].set_title('Dados brutos',\n",
    "                            fontweight =\"bold\")\n",
    "            \n",
    "            sns.barplot(x = bank_target_perc.index, \n",
    "                        y = bank_raw_target_perc.columns[0], \n",
    "                        data = bank_target_perc, \n",
    "                        ax = ax[1])\n",
    "            ax[1].bar_label(ax[1].containers[0])\n",
    "            ax[1].set_title('Dados filtrados',\n",
    "                            fontweight =\"bold\")\n",
    "        else:\n",
    "            bank_raw_target_perc.plot(kind='pie', autopct='%.2f', y=bank_raw_target_perc.columns[0], ax = ax[0])\n",
    "            ax[0].set_title('Dados brutos',\n",
    "                            fontweight =\"bold\")\n",
    "            \n",
    "            bank_target_perc.plot(kind='pie', autopct='%.2f', y=bank_raw_target_perc.columns[0], ax = ax[1])\n",
    "            ax[1].set_title('Dados filtrados',\n",
    "                            fontweight =\"bold\")\n",
    "\n",
    "        st.pyplot(plt)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
